/** Autogenerated Main.cpp. */

// ===============================| Include only the DSP files  |===============================

#include <AppConfig.h>
#include <hi_dsp_library/hi_dsp_library.h>
#include <hi_faust/hi_faust.h>
#include "includes.h"
// =========================| Now we can add the rest of the codebase |=========================

#include <JuceHeader.h>

#if !JUCE_WINDOWS
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

// =====================================| Project Factory |=====================================

namespace project
{

struct Factory: public scriptnode::dll::StaticLibraryHostFactory
{
	Factory()
	{
		TempoSyncer::initTempoData();
		// Node registrations -----------------------------------------------------------------
		
		registerPolyNode<project::FilterNew<1>, project::FilterNew<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::FilterNew2<1>, project::FilterNew2<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::FilterNew3<1>, project::FilterNew3<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::FilterNew4<1>, project::FilterNew4<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::FilterNew5<1>, project::FilterNew5<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::FilterNew6<1>, project::FilterNew6<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::FilterNew7<1>, project::FilterNew7<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::FilterNew8<1>, project::FilterNew8<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::FoldTests<1>, project::FoldTests<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::modtest<1>, wrap::illegal_poly<project::modtest<1>>>();
		registerPolyNode<project::xfade1<1>, project::xfade1<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::xfade2<1>, project::xfade2<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::xfade3<1>, project::xfade3<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::xfade4<1>, project::xfade4<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::xfade5<1>, project::xfade5<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::xfade6<1>, project::xfade6<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::xfade7<1>, project::xfade7<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::xfade8<1>, project::xfade8<NUM_POLYPHONIC_VOICES>>();
		registerDataNode<project::polymod_networkdata>();
		registerDataNode<project::Averb_networkdata>();
		registerDataNode<project::Cho_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::eventin_networkdata>();
		registerDataNode<project::EventOut_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::finalgain_networkdata>();
		registerDataNode<project::glide_networkdata>();
		registerDataNode<project::Mod1_networkdata>();
		registerDataNode<project::Mod10_networkdata>();
		registerDataNode<project::Mod11_networkdata>();
		registerDataNode<project::Mod12_networkdata>();
		registerDataNode<project::Mod2_networkdata>();
		registerDataNode<project::Mod3_networkdata>();
		registerDataNode<project::Mod4_networkdata>();
		registerDataNode<project::Mod5_networkdata>();
		registerDataNode<project::Mod9_networkdata>();
		registerDataNode<project::ModToCable_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::p1_networkdata>();
		registerDataNode<project::p2_networkdata>();
		registerDataNode<project::p3_networkdata>();
		registerDataNode<project::p4_networkdata>();
		registerDataNode<project::p5_networkdata>();
		registerDataNode<project::p6_networkdata>();
		registerDataNode<project::p7_networkdata>();
		registerDataNode<project::p8_networkdata>();
		registerDataNode<project::pan_networkdata>();
		registerDataNode<project::pan2_networkdata>();
		registerDataNode<project::pan3_networkdata>();
		registerDataNode<project::pan4_networkdata>();
		registerDataNode<project::pan5_networkdata>();
		registerDataNode<project::pan6_networkdata>();
		registerDataNode<project::pan7_networkdata>();
		registerDataNode<project::pan8_networkdata>();
		registerDataNode<project::PanSliders_networkdata>();
		registerDataNode<project::PitchMod_networkdata>();
		registerDataNode<project::PitchNu1_networkdata>();
		registerDataNode<project::PitchNu2_networkdata>();
		registerDataNode<project::PitchNu3_networkdata>();
		registerDataNode<project::PitchNu4_networkdata>();
		registerDataNode<project::PitchNu5_networkdata>();
		registerDataNode<project::PitchNu6_networkdata>();
		registerDataNode<project::PitchNu7_networkdata>();
		registerDataNode<project::PitchNu8_networkdata>();
		registerDataNode<project::PitchStage1_networkdata>();
		registerDataNode<project::PitchStage2_networkdata>();
		registerDataNode<project::PitchStage3_networkdata>();
		registerDataNode<project::PitchStage4_networkdata>();
		registerDataNode<project::PitchStage5_networkdata>();
		registerDataNode<project::PitchStage6_networkdata>();
		registerDataNode<project::PitchStage7_networkdata>();
		registerDataNode<project::PitchStage8_networkdata>();
		registerDataNode<project::PitchTop_networkdata>();
		registerDataNode<project::PreGain_networkdata>();
		registerDataNode<project::WtMod1_networkdata>();
		registerDataNode<project::_8Delay_networkdata>();
		registerDataNode<project::_8sine_networkdata>();
	}
};
}

scriptnode::dll::FactoryBase* scriptnode::DspNetwork::createStaticFactory()
{
	return new project::Factory();
}

#if !JUCE_WINDOWS
#pragma clang diagnostic pop
#endif


