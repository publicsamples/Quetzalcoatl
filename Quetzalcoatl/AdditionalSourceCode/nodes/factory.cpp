/** Autogenerated Main.cpp. */

// ==============================| Include only the DSP files  |==============================

#include <hi_dsp_library/hi_dsp_library.h>
#include <hi_faust/hi_faust.h>
#include "includes.h"
// ========================| Now we can add the rest of the codebase |========================

#include <JuceHeader.h>

// ====================================| Project Factory |====================================

namespace project
{

struct Factory: public scriptnode::dll::StaticLibraryHostFactory
{
	Factory()
	{
		TempoSyncer::initTempoData();
		// Node registrations ---------------------------------------------------------------
		
		registerPolyNode<project::clonetest<1>, project::clonetest<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::ctest2<1>, project::ctest2<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::gate<1>, project::gate<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::polymod<1>, project::polymod<NUM_POLYPHONIC_VOICES>>();
		registerDataNode<project::arrange_networkdata>();
		registerDataNode<project::CLEAR_networkdata>();
		registerDataNode<project::cmod_networkdata>();
		registerDataNode<project::DUALFILTER_networkdata>();
		registerDataNode<project::env_networkdata>();
		registerDataNode<project::file_networkdata>();
		registerDataNode<project::FilterVCA_networkdata>();
		registerDataNode<project::fold_networkdata>();
		registerDataNode<project::gater_networkdata>();
		registerDataNode<project::harmFMnode_networkdata>();
		registerDataNode<project::harmnode_networkdata>();
		registerDataNode<project::harmnode2_networkdata>();
		registerDataNode<project::harmo_networkdata>();
		registerDataNode<project::harmo_networkdata>();
		registerDataNode<project::harmo_networkdata>();
		registerDataNode<project::harmo2_networkdata>();
		registerDataNode<project::HarmOct_networkdata>();
		registerDataNode<project::Harmonic_networkdata>();
		registerDataNode<project::harmx4node_networkdata>();
		registerDataNode<project::harmx8node_networkdata>();
		registerDataNode<project::Harrage_networkdata>();
		registerDataNode<project::Hclone16_networkdata>();
		registerDataNode<project::Hclone32_networkdata>();
		registerDataNode<project::Hclone4_networkdata>();
		registerDataNode<project::Hclone8_networkdata>();
		registerDataNode<project::H_Arrange_networkdata>();
		registerDataNode<project::LFO_networkdata>();
		registerDataNode<project::main_networkdata>();
		registerDataNode<project::MidiNote_networkdata>();
		registerDataNode<project::MidiVel_networkdata>();
		registerDataNode<project::mod_networkdata>();
		registerDataNode<project::MOD1CABLE_networkdata>();
		registerDataNode<project::modsel_networkdata>();
		registerDataNode<project::modswitcher_networkdata>();
		registerDataNode<project::modtest_networkdata>();
		registerDataNode<project::Osc_networkdata>();
		registerDataNode<project::pmod_networkdata>();
		registerDataNode<project::polymod2_networkdata>();
		registerDataNode<project::polymod3_networkdata>();
		registerDataNode<project::polymod4_networkdata>();
		registerDataNode<project::SampleFM_networkdata>();
		registerDataNode<project::t_networkdata>();
		registerDataNode<project::test_networkdata>();
		registerDataNode<project::time_networkdata>();
		registerDataNode<project::timer_networkdata>();
		registerDataNode<project::xfadeswitch_networkdata>();
		registerDataNode<project::XFADEx8_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::_4wayswitch_networkdata>();
	}
};
}

scriptnode::dll::FactoryBase* scriptnode::DspNetwork::createStaticFactory()
{
	return new project::Factory();
}

