/** Autogenerated Main.cpp. */

// ==============================| Include only the DSP files  |==============================

#include <AppConfig.h>
#include <hi_dsp_library/hi_dsp_library.h>
#include <hi_faust/hi_faust.h>
#include "includes.h"
// ========================| Now we can add the rest of the codebase |========================

#include <JuceHeader.h>

#if !JUCE_WINDOWS
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

// ====================================| Project Factory |====================================

namespace project
{

struct Factory: public scriptnode::dll::StaticLibraryHostFactory
{
	Factory()
	{
		TempoSyncer::initTempoData();
		// Node registrations ---------------------------------------------------------------
		
		registerPolyNode<project::FoldTests<1>, project::FoldTests<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::GmodA<1>, wrap::illegal_poly<project::GmodA<1>>>();
		registerDataNode<project::polymod_networkdata>();
		registerDataNode<project::Averb_networkdata>();
		registerDataNode<project::Cho_networkdata>();
		registerDataNode<project::eventin_networkdata>();
		registerDataNode<project::EventOut_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::FilterNew_networkdata>();
		registerDataNode<project::FilterNew2_networkdata>();
		registerDataNode<project::FilterNew3_networkdata>();
		registerDataNode<project::FilterNew4_networkdata>();
		registerDataNode<project::FilterNew5_networkdata>();
		registerDataNode<project::FilterNew6_networkdata>();
		registerDataNode<project::FilterNew7_networkdata>();
		registerDataNode<project::FilterNew8_networkdata>();
		registerDataNode<project::finalgain_networkdata>();
		registerDataNode<project::glide_networkdata>();
		registerDataNode<project::Mod1_networkdata>();
		registerDataNode<project::Mod10_networkdata>();
		registerDataNode<project::Mod11_networkdata>();
		registerDataNode<project::Mod12_networkdata>();
		registerDataNode<project::Mod2_networkdata>();
		registerDataNode<project::Mod3_networkdata>();
		registerDataNode<project::Mod4_networkdata>();
		registerDataNode<project::Mod5_networkdata>();
		registerDataNode<project::Mod9_networkdata>();
		registerDataNode<project::modtest_networkdata>();
		registerDataNode<project::ModToCable_networkdata>();
		registerDataNode<project::p1_networkdata>();
		registerDataNode<project::p2_networkdata>();
		registerDataNode<project::p3_networkdata>();
		registerDataNode<project::p4_networkdata>();
		registerDataNode<project::p5_networkdata>();
		registerDataNode<project::p6_networkdata>();
		registerDataNode<project::p7_networkdata>();
		registerDataNode<project::p8_networkdata>();
		registerDataNode<project::pan_networkdata>();
		registerDataNode<project::pan2_networkdata>();
		registerDataNode<project::pan3_networkdata>();
		registerDataNode<project::pan4_networkdata>();
		registerDataNode<project::pan5_networkdata>();
		registerDataNode<project::pan6_networkdata>();
		registerDataNode<project::pan7_networkdata>();
		registerDataNode<project::pan8_networkdata>();
		registerDataNode<project::PanSliders_networkdata>();
		registerDataNode<project::PitchMod_networkdata>();
		registerDataNode<project::PitchStage1_networkdata>();
		registerDataNode<project::PitchStage2_networkdata>();
		registerDataNode<project::PitchStage3_networkdata>();
		registerDataNode<project::PitchStage4_networkdata>();
		registerDataNode<project::PitchStage5_networkdata>();
		registerDataNode<project::PitchStage6_networkdata>();
		registerDataNode<project::PitchStage7_networkdata>();
		registerDataNode<project::PitchStage8_networkdata>();
		registerDataNode<project::PreGain_networkdata>();
		registerDataNode<project::WtMod1_networkdata>();
		registerDataNode<project::xfade1_networkdata>();
		registerDataNode<project::xfade2_networkdata>();
		registerDataNode<project::xfade3_networkdata>();
		registerDataNode<project::xfade4_networkdata>();
		registerDataNode<project::xfade5_networkdata>();
		registerDataNode<project::xfade6_networkdata>();
		registerDataNode<project::xfade7_networkdata>();
		registerDataNode<project::xfade8_networkdata>();
		registerDataNode<project::_8Delay_networkdata>();
		registerDataNode<project::_8sine_networkdata>();
	}
};
}

scriptnode::dll::FactoryBase* scriptnode::DspNetwork::createStaticFactory()
{
	return new project::Factory();
}

#if !JUCE_WINDOWS
#pragma clang diagnostic pop
#endif


