/** Autogenerated Main.cpp. */

// ===============================| Include only the DSP files  |===============================

#include <AppConfig.h>
#include <hi_dsp_library/hi_dsp_library.h>
#include <hi_faust/hi_faust.h>
#include "includes.h"
// =========================| Now we can add the rest of the codebase |=========================

#include <JuceHeader.h>

#if !JUCE_WINDOWS
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

// =====================================| Project Factory |=====================================

namespace project
{

struct Factory: public scriptnode::dll::StaticLibraryHostFactory
{
	Factory()
	{
		TempoSyncer::initTempoData();
		// Node registrations -----------------------------------------------------------------
		
		registerPolyNode<project::FilterNew<1>, project::FilterNew<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::FilterNew2<1>, project::FilterNew2<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::FilterNew3<1>, project::FilterNew3<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::FilterNew4<1>, project::FilterNew4<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::FilterNew5<1>, project::FilterNew5<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::FilterNew6<1>, project::FilterNew6<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::FilterNew7<1>, project::FilterNew7<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::FilterNew8<1>, project::FilterNew8<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::Mod1<1>, project::Mod1<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::Mod10<1>, project::Mod10<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::Mod11<1>, project::Mod11<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::Mod12<1>, project::Mod12<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::Mod2<1>, project::Mod2<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::Mod3<1>, project::Mod3<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::Mod4<1>, project::Mod4<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::Mod9<1>, project::Mod9<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::modtest<1>, wrap::illegal_poly<project::modtest<1>>>();
		registerPolyNode<project::modtest1<1>, wrap::illegal_poly<project::modtest1<1>>>();
		registerPolyNode<project::modtest2<1>, wrap::illegal_poly<project::modtest2<1>>>();
		registerPolyNode<project::modtest3<1>, wrap::illegal_poly<project::modtest3<1>>>();
		registerPolyNode<project::modtest4<1>, wrap::illegal_poly<project::modtest4<1>>>();
		registerPolyNode<project::modtest5<1>, wrap::illegal_poly<project::modtest5<1>>>();
		registerPolyNode<project::modtest6<1>, wrap::illegal_poly<project::modtest6<1>>>();
		registerPolyNode<project::modtest7<1>, wrap::illegal_poly<project::modtest7<1>>>();
		registerPolyNode<project::modtest8<1>, wrap::illegal_poly<project::modtest8<1>>>();
		registerPolyNode<project::p1<1>, project::p1<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::p2<1>, project::p2<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::p4<1>, project::p4<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::p5<1>, project::p5<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::p6<1>, project::p6<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::p7<1>, project::p7<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::p8<1>, project::p8<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::pan<1>, project::pan<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::pan2<1>, project::pan2<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::pan3<1>, project::pan3<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::pan4<1>, project::pan4<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::pan5<1>, project::pan5<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::pan6<1>, project::pan6<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::pan7<1>, project::pan7<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::pan8<1>, project::pan8<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::xfade1<1>, project::xfade1<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::xfade2<1>, project::xfade2<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::xfade3<1>, project::xfade3<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::xfade4<1>, project::xfade4<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::xfade5<1>, project::xfade5<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::xfade6<1>, project::xfade6<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::xfade7<1>, project::xfade7<NUM_POLYPHONIC_VOICES>>();
		registerPolyNode<project::xfade8<1>, project::xfade8<NUM_POLYPHONIC_VOICES>>();
		registerDataNode<project::polymod_networkdata>();
		registerDataNode<project::Averb_networkdata>();
		registerDataNode<project::CableText1_networkdata>();
		registerDataNode<project::cbtes_networkdata>();
		registerDataNode<project::Cho_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::eventin_networkdata>();
		registerDataNode<project::EventOut_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::finalgain_networkdata>();
		registerDataNode<project::Fm_networkdata>();
		registerDataNode<project::FoldTests_networkdata>();
		registerDataNode<project::glide_networkdata>();
		registerDataNode<project::Mod5_networkdata>();
		registerDataNode<project::ModToCable_networkdata>();
		registerDataNode<project::mtest_networkdata>();
		registerDataNode<project::p3_networkdata>();
		registerDataNode<project::PanSliders_networkdata>();
		registerDataNode<project::PanSliders2_networkdata>();
		registerDataNode<project::PitchMod_networkdata>();
		registerDataNode<project::PitchNu1_networkdata>();
		registerDataNode<project::PitchNu2_networkdata>();
		registerDataNode<project::PitchNu3_networkdata>();
		registerDataNode<project::PitchNu4_networkdata>();
		registerDataNode<project::PitchNu5_networkdata>();
		registerDataNode<project::PitchNu6_networkdata>();
		registerDataNode<project::PitchNu7_networkdata>();
		registerDataNode<project::PitchNu8_networkdata>();
		registerDataNode<project::PitchSliders_networkdata>();
		registerDataNode<project::PitchStage1_networkdata>();
		registerDataNode<project::PitchStage2_networkdata>();
		registerDataNode<project::PitchStage3_networkdata>();
		registerDataNode<project::PitchStage4_networkdata>();
		registerDataNode<project::PitchStage5_networkdata>();
		registerDataNode<project::PitchStage6_networkdata>();
		registerDataNode<project::PitchStage7_networkdata>();
		registerDataNode<project::PitchStage8_networkdata>();
		registerDataNode<project::PitchTop_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::PreGain_networkdata>();
		registerDataNode<project::PreSliders2_networkdata>();
		registerDataNode<project::WtMod1_networkdata>();
		registerDataNode<project::_8Delay_networkdata>();
		registerDataNode<project::_8sine_networkdata>();
	}
};
}

scriptnode::dll::FactoryBase* scriptnode::DspNetwork::createStaticFactory()
{
	return new project::Factory();
}

#if !JUCE_WINDOWS
#pragma clang diagnostic pop
#endif


